//初始化
var ctx = null,
  	doc = null,
  	page = null,
  	command = null;

var sliceMaster = function(){
	//创建图层的可变数组
	this.allLayers = NSMutableArray.array();
	
}

sliceMaster.prototype = {
	run: function(config,path){
		var loopObj = null,
			loopVar = null;

		log('run path:'+ path);
		//选中的图层
		loopObj = ctx.selection.objectEnumerator();
		//遍历选中对象并判断类型
		while(loopVar = loopObj.nextObject()){
			//为图层时才放入合集
			if(loopVar.className() !== 'MSArtboardGroup'){
				log('notMSArtboardGroup');
				this.allLayers.addObject(loopVar);
			}else{
				log('MSArtboardGroup');
			}
		}
		//处理图层
		this.collectLayers(config,path);

		return this;
	},
	collectLayers: function(config,path){
		var exportPath = path;

		var theLayer;
		//所选的图层合集
		var loopLayer = this.allLayers.objectEnumerator();

		log(loopLayer);
		//遍历图层
		while(theLayer = loopLayer.nextObject()){
			//切片导出路径
			var layerSlicePath = exportPath,
				layerSliceName = util.toJSString(theLayer.name());
				log('layerSliceName:'+layerSliceName);
			if(config.format == 0){
				var format = 'png';
			}else if(config.format == 1){
				var format = 'pdf';
			}else if(config.format == 2){
				var format = 'svg';
			}else if(config.format == 3){
				var format = 'jpg';
			}
			this.handleSlice(theLayer,{
				name: layerSliceName,
				path: layerSlicePath,
				format: format,
				scaleHalfx: config.scaleHalfx,
				scale1x: config.scale1x,
				scale2x: config.scale2x,
				scale3x: config.scale3x,
				width: config.width,
				height: config.height
			});
		}
	},
	handleSlice: function(layer,options){
		//Looks like MSLayerArray is a wrapper to NSArray with some convenience functions for layer management. 
		//The underlying data is in _layers which has an accessor method layers
      	//（这是看到前人的经验，不酱紫写没法新建一个包含该图层的group）
		var layers = MSLayerArray.arrayWithLayer(layer);

      	//新建一个包含图层的group，用于包含图层和切片
      	var group = MSLayerGroup.groupFromLayers(layers);
      		group.setName(options.name);

      	//给图层新建一个切片，因为已经有group了，所以直接被包含在group里
		var slice = MSSliceLayer.sliceLayerFromLayer(layer),
			//获取切片、图层的位置宽高等信息
			sliceFrame = slice.frame(),
			layerFrame = layer.frame();

		var ancestry = null,
			exportRequest = null;
		
      	
		//初始化导出路径名称
	    var exportName = options.path +'/'+ options.name,
	    	exportSlicePath = "";
		log('exportName:'+exportName);

		if(options.width||options.height){
			//切片设置为输入的宽高
		    sliceFrame.setWidth(layerFrame.width());
	        sliceFrame.setHeight(layerFrame.height());
	   	}else{
	    	
	    }
	    //计算切片与图层的位置差
	    var sliceX = (layerFrame.width() - sliceFrame.width()) / 2;
	    var sliceY = (layerFrame.height() - sliceFrame.height()) / 2;

        var sliceXFloor = Math.floor(sliceX);
        var sliceYFloor = Math.floor(sliceY);

        //按照位置差移动切片位置，使图层居中于切片中心
        sliceFrame.setX(sliceXFloor);
        sliceFrame.setY(sliceYFloor);
        log('sliceX'+sliceX+';sliceY'+sliceY);

	    //使导出切片去除背景，export group contents only
	    slice.exportOptions().setLayerOptions(2);
	    ctx.document.reloadInspector();
	    log('group:'+group);
	    // resize group
	    group.layerDidEndResize();

	    log('slice:'+slice);

	    //新建一个导出请求，以便可以设置导出倍数等等
	    ancestry = [MSImmutableLayerAncestry ancestryWithMSLayer:slice];
		exportRequest = MSExportRequest.exportRequestsFromLayerAncestry_(ancestry).firstObject();
		exportRequest.format = options.format;
	    
	    if(options.format == 'pdf' || options.format == 'svg'){
	    	
	    	//导出路径
	    	exportSlicePath = exportName +'.' + options.format;
		    //导出切片
		    doc.saveArtboardOrSlice_toFile(exportRequest, exportSlicePath);
		    log('export to pdf or svg');
	    }else{
	    	// 1x
		    if(options.scaleHalfx){
		    	//设置导出倍数
		      	exportRequest.scale = "0.5";
		      	//导出路径
		      	exportSlicePath = exportName+'@0.5x.'+options.format;
		      	//导出切片
		      	doc.saveArtboardOrSlice_toFile(exportRequest, exportSlicePath);
		    }
		      // 1x
		    if(options.scale1x){
		    	//设置导出倍数
		      	exportRequest.scale = "1";
		      	//导出路径
		      	exportSlicePath = exportName+'.'+options.format;
		      	//导出切片
		      	doc.saveArtboardOrSlice_toFile(exportRequest, exportSlicePath);
		    }
		      // 2x
		    if(options.scale2x){
		      	exportRequest.scale = "2";
		      	exportSlicePath = exportName+'@2x.'+options.format;
		      	doc.saveArtboardOrSlice_toFile(exportRequest, exportSlicePath);
		    }
		      // 3x
		    if(options.scale3x){
		      	exportRequest.scale = "3";
		      	exportSlicePath = exportName+'@3x.'+options.format;
		      	doc.saveArtboardOrSlice_toFile(exportRequest, exportSlicePath);
		    }
		    log('export to png or jpg');
	    }
	    
	    
	}
}
/* NSString to js string*/
var util = {

  toJSString: function(NSStr){
    var config = arguments.length > 1 ? arguments[1] : null;
    var str = new String(NSStr).toString();

    if(config && config.escapeLine){
      str = str.replace(/\\-/g, '-');
    }

    if(config && config.encode){
      str = encodeURIComponent(str);
    }
    return str;
  }

}
//对话框设置参数
var setPanel = function(){}
setPanel.prototype= {
	run: function(){
		var exportConfig = this.setConPanel(),
			exportPath = null,
			sliceMasterRun = null,
			exportResult = null;
		if(exportConfig.button == 1000){
			exportPath = this.setSavePanel();
			log('exportPath:'+exportPath);
		    if(exportPath){
		       coscript.shouldKeepAround = true;
		       sliceMasterRun = new sliceMaster().run(exportConfig,exportPath);
		    }
		}
	},
	setConPanel: function(){
		var conPanel = COSAlertWindow.new(),
			items = ['png','pdf','svg','jpg'],
			comboBox = NSComboBox.alloc().initWithFrame(NSMakeRect(0,0,200,34)),
    		scaleBox1 = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14)),
    		scaleBox2 = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14)),
    		scaleBox3 = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14)),
    		scaleBox4 = NSButton.alloc().initWithFrame(NSMakeRect(0,0,250,14));

    		conPanel.addTextLabelWithValue('请输入宽度，单位：px');
		    conPanel.addTextFieldWithValue('');
		    conPanel.addTextLabelWithValue('请输入高度，单位：px');
		    conPanel.addTextFieldWithValue('');
		    
		    conPanel.addButtonWithTitle('确定');
		    conPanel.addButtonWithTitle('取消');

		    comboBox.addItemsWithObjectValues(items);
		    comboBox.selectItemAtIndex(0);

		    scaleBox1.setTitle('@0.5x');
		    scaleBox1.setButtonType(NSSwitchButton);
		    scaleBox1.setState(false);

		    scaleBox2.setTitle('@1x');
		    scaleBox2.setButtonType(NSSwitchButton);
		    scaleBox2.setState(false);

		    scaleBox3.setTitle('@2x');
		    scaleBox3.setButtonType(NSSwitchButton);
		    scaleBox3.setState(false);

		    scaleBox4.setTitle('@3x');
		    scaleBox4.setButtonType(NSSwitchButton);
		    scaleBox4.setState(false);

		    conPanel.addAccessoryView(comboBox);
		    conPanel.addAccessoryView(scaleBox1);
		    conPanel.addAccessoryView(scaleBox2);
		    conPanel.addAccessoryView(scaleBox3);
		    conPanel.addAccessoryView(scaleBox4);


		    log('width:'+conPanel.viewAtIndex(1).stringValue());
		    log('height:'+conPanel.viewAtIndex(3).stringValue());
		    return {
		      //用户点击按钮 确认返回1000，取消返回1001
		      button: conPanel.runModal(),
		      //导出切片格式
		      format: comboBox.indexOfSelectedItem(),
		      //切片的尺寸
		      width: conPanel.viewAtIndex(1).stringValue(),
		      height: conPanel.viewAtIndex(3).stringValue(),
		      //是否导出0.5倍图
		      scaleHalfx: scaleBox1.state(),
		      //是否导出1倍图
		      scale1x: scaleBox2.state(),
		      //是否导出2倍图
		      scale2x: scaleBox3.state(),
		      //是否导出3倍图
		      scale3x: scaleBox4.state()
		    }
	},
	setSavePanel: function(){
		var savePanel = NSSavePanel.savePanel();

	    savePanel.setTitle('Export');
	    savePanel.setNameFieldLabel('Export to');
	    savePanel.setShowsTagField(false);
	    savePanel.setCanCreateDirectories(true);

	    if (savePanel.runModal() != NSOKButton){
	      log('cancel save');
	      return false;
	    }else{
	      //返回导出路径
	      return savePanel.URL().path();
	    }
	}
}
var onRun = function(context){
	ctx = context;
  	doc = context.document;
  	page = doc.currentPage();
  	command = context.command;

 	new setPanel().run();
}